name: Deploy to Azure VM

on:
  push:
    branches:
      - main  # Trigger the workflow on push to the main branch

jobs:
  deploy:
    runs-on: ubuntu-latest  # You can change this to a different runner if needed

    steps:
    # Step 1: Checkout the repository
    - name: Checkout repository
      uses: actions/checkout@v2

    # Step 2: Set up SSH key for GitHub Actions (Only if not already done)
    - name: Set up SSH key
      run: |
        # Check if the SSH private key exists
        if [ ! -f ~/.ssh/id_ed25519 ]; then
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > private_key.pem  # Store private key in a file
          chmod 600 private_key.pem  # Secure the key file
          mkdir -p ~/.ssh
          mv private_key.pem ~/.ssh/id_ed25519  # Move key to the correct directory
          echo "@@ SSH private key has been set up."
        else
          echo "@@ SSH private key already exists, skipping setup."
        fi

    # Step 3: Add Azure VM to known hosts (Only if not already done)
    - name: Add Azure VM to known hosts
      run: |
        # Check if the Azure VM is already in known hosts
        if ! grep -q "13.80.26.188" ~/.ssh/known_hosts; then
        ssh-keyscan -H 13.80.26.188 >> ~/.ssh/known_hosts  # Avoid host verification prompt
        echo "@@ Azure VM added to known hosts."
        else
        echo "@@ Azure VM is already in known hosts, skipping addition."
        fi

    # Step 4: Run the env.sh script, stop the existing Node.js process, and restart it
    - name: Deploy to Azure VM
      run: |
        ssh -v -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no ${{ secrets.AZURE_VM_USER }}@13.80.26.188 << 'EOF'
          # Step 4.1: Navigate to the project directory
          echo "@@ Navigate to the project directory"
          cd /home/${{ secrets.AZURE_VM_USER }}/Project-ProgrammingIS 
          rm server.log

          # Step 4.2: Run the env.sh script (no need for chmod +x)
          echo "@@ Running env.sh script..."
          bash env.sh  # Run env.sh script

          # Step 4.3: Kill any running Node.js process 
          echo "@@ Kill any running Node.js process"
          pkill -f 'node server.js' || echo 'No running process found'

          # Step 4.4: Pull the latest changes from GitHub
          echo "@@ Git Pull"
          git pull origin main

          # Step 4.5: Start the Node.js server in the background and log output
          echo "@@ Start the Node.js server"
          nohup node server.js > server.log 2>&1 &  # Start the Node.js app in the background
        EOF